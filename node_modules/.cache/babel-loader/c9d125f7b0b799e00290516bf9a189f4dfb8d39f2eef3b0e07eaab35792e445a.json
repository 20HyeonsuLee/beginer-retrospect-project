{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonsulee/MyFolder/BCSD/ageofwar/src/components/turret/Turret.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { styled } from \"styled-components\";\nimport targetImg from \"../../assets/images/turrets//target.png\";\nimport { selectedTower } from \"../../store/slices/selectedTurret\";\nimport { status } from \"../../store/slices/status\";\nimport { ally } from \"../../utils/data/dataSet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    display: flex;\n    position: absolute;\n    align-items: center;\n    justify-content: center;\n    width: 55px;\n    height: 55px;\n    left: ${props => props.location.left};\n    bottom: ${props => props.location.bottom};\n    z-index: 3;\n`;\n_c = Container;\nconst TurretImage = styled.img`\n    position: absolute;\n    width: 140px;\n    height: 140px;\n    transform: rotate( ${props => props.deg + \"deg\"});\n`;\n_c2 = TurretImage;\nconst TargetImage = styled.img`\n    position: absolute;\n    width: 55px;\n    height: 55px;\n    z-index: 10;\n    &:hover{\n        background-color: rgba(240, 240, 240, 0.5);\n    }\n    display: ${props => {\n  if (props.menu === \"add\") {\n    if (props.towerInfo === null) return \"block\";else return \"none\";\n  } else if (props.menu === \"cell\") {\n    if (props.towerInfo !== null) return \"block\";else return \"none\";\n  } else {\n    return \"none\";\n  }\n}};\n`;\n_c3 = TargetImage;\nexport default function Turret({\n  location,\n  menu,\n  team,\n  turretInfo,\n  index\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const selectedTurret = useSelector(state => state.selectedTurret);\n  const turretImage = require(\"../../assets/images/turrets/level\" + turretInfo.level + \"/turret\" + turretInfo.turret + \".gif\");\n  // status의 menu가 add인지 cell인지에 따라서 TargetImage의 컴포넌트 포함 여부를 결정한다.\n  // menu에 따라 TargetImage의 액션을 다르게 준다.\n  // add일 경우 status의 tower에 해당 터렛의 정보를 입력한다.\n  // 이때 해당 터렛의 정보는 ShopTurret에서 클릭한 터렛의 정보로 한다.\n  // cell일 경우 클릭한 Index의 tower의 정보를 터렛의 금액의 절반을 회수하고, null로 한다.\n\n  // 터렛의 범위에 FieldUnits의 상대 유닛이 들어오면 공격모션으로 변환 한다.\n  // 공격 속도에 맞게 투사체를 발사한다.\n  // 투사체는 상대 유닛에 적중하면 상대 유닛의 체력을 깎은 후 소멸한다.\n  return /*#__PURE__*/_jsxDEV(Container, {\n    location: location,\n    children: [/*#__PURE__*/_jsxDEV(TurretImage, {\n      src: turretImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TargetImage, {\n      src: targetImg,\n      menu: menu,\n      towerInfo: turretInfo,\n      onClick: e => {\n        if (menu === \"add\") {\n          dispatch(status.actions.setTurret({\n            index: index,\n            turret: selectedTurret,\n            team: team\n          }));\n        } else {\n          dispatch(status.actions.removeTurret({\n            index: index\n          }));\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(Turret, \"AAPofFJMv1LcwmRs3FtaJ7F6i+k=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c4 = Turret;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"TurretImage\");\n$RefreshReg$(_c3, \"TargetImage\");\n$RefreshReg$(_c4, \"Turret\");","map":{"version":3,"names":["useDispatch","useSelector","styled","targetImg","selectedTower","status","ally","jsxDEV","_jsxDEV","Container","div","props","location","left","bottom","_c","TurretImage","img","deg","_c2","TargetImage","menu","towerInfo","_c3","Turret","team","turretInfo","index","_s","dispatch","selectedTurret","state","turretImage","require","level","turret","children","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","e","actions","setTurret","removeTurret","_c4","$RefreshReg$"],"sources":["/Users/hyeonsulee/MyFolder/BCSD/ageofwar/src/components/turret/Turret.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { styled } from \"styled-components\";\nimport targetImg from \"../../assets/images/turrets//target.png\"\nimport { selectedTower } from \"../../store/slices/selectedTurret\";\nimport { status } from \"../../store/slices/status\";\nimport { ally } from \"../../utils/data/dataSet\";\n\nconst Container = styled.div`\n    display: flex;\n    position: absolute;\n    align-items: center;\n    justify-content: center;\n    width: 55px;\n    height: 55px;\n    left: ${props => props.location.left};\n    bottom: ${props => props.location.bottom};\n    z-index: 3;\n`;\nconst TurretImage = styled.img`\n    position: absolute;\n    width: 140px;\n    height: 140px;\n    transform: rotate( ${props => props.deg + \"deg\"});\n`;\nconst TargetImage = styled.img`\n    position: absolute;\n    width: 55px;\n    height: 55px;\n    z-index: 10;\n    &:hover{\n        background-color: rgba(240, 240, 240, 0.5);\n    }\n    display: ${props =>{\n        if(props.menu === \"add\"){\n            if(props.towerInfo === null)\n                return \"block\"\n            else\n                return \"none\"\n        }else if(props.menu === \"cell\"){\n            if(props.towerInfo !== null)\n                return \"block\"\n            else\n                return \"none\"\n        }else{\n            return \"none\"\n        }\n    }};\n`;\n\nexport default function Turret({location, menu, team, turretInfo, index}){\n\n    const dispatch = useDispatch();\n    const selectedTurret = useSelector(state => state.selectedTurret)\n    const turretImage = require(\"../../assets/images/turrets/level\" + turretInfo.level + \"/turret\" + turretInfo.turret + \".gif\")\n    // status의 menu가 add인지 cell인지에 따라서 TargetImage의 컴포넌트 포함 여부를 결정한다.\n    // menu에 따라 TargetImage의 액션을 다르게 준다.\n    // add일 경우 status의 tower에 해당 터렛의 정보를 입력한다.\n    // 이때 해당 터렛의 정보는 ShopTurret에서 클릭한 터렛의 정보로 한다.\n    // cell일 경우 클릭한 Index의 tower의 정보를 터렛의 금액의 절반을 회수하고, null로 한다.\n\n    // 터렛의 범위에 FieldUnits의 상대 유닛이 들어오면 공격모션으로 변환 한다.\n    // 공격 속도에 맞게 투사체를 발사한다.\n    // 투사체는 상대 유닛에 적중하면 상대 유닛의 체력을 깎은 후 소멸한다.\n    return (\n        <Container location={location}>\n            <TurretImage src={turretImage}></TurretImage>\n            <TargetImage src={targetImg} menu={menu} towerInfo={turretInfo} onClick={e => {\n                if(menu === \"add\"){\n                    dispatch(status.actions.setTurret({index:index, turret:selectedTurret, team:team}))\n                }else{\n                    dispatch(status.actions.removeTurret({index:index}))\n                }\n            }}></TargetImage>\n        </Container>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}